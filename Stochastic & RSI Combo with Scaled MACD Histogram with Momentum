//@version=6
indicator(title = 'Stochastic & RSI Combo with Scaled MACD Histogram with Momentum', shorttitle = 'Stoch & RSI with Scaled MACD', format = format.price, precision = 2)

// ——— Stochastic RSI Inputs ———
smoothK = input.int(3, 'Smooth K', minval = 1)
smoothD = input.int(3, 'Smooth D', minval = 1)
lengthRSI = input.int(14, 'RSI Length', minval = 1)
lengthRSI2 = input.int(50, 'Secondary RSI Length', minval = 1)
lengthEMA = input.int(14, 'EMA Length', minval = 1)
lengthStoch = input.int(14, 'Stochastic Length', minval = 1)
src = input(close, title = 'RSI Source')

// ——— Stochastic RSI Calculation ———
rsi_stoch = ta.rsi(src, lengthStoch)
rsi1 = ta.rsi(src, lengthRSI)
rsi2 = ta.rsi(src, lengthRSI2)
k = ta.sma(ta.stoch(rsi_stoch, rsi_stoch, rsi_stoch, lengthStoch), smoothK)
d = ta.sma(k, smoothD)
plot(k, 'Stoch K', color = color.new(#0537be, 0))
plot(d, 'Stoch D', color = color.new(#ff6f00, 0))

// ——— RSI Bands and Colors ———
max_level = input.int(title = 'Upper level', defval = 70, minval = 0, maxval = 100)
min_level = input.int(title = 'Lower level', defval = 30, minval = 0, maxval = 100)
h0 = hline(max_level, 'Upper Band', color = #787B86, editable = false)
h1 = hline(min_level, 'Lower Band', color = #787B86, editable = false)
h2 = hline(50, 'Middle Band', color = #787B86)
fill(h0, h1, color = color.rgb(33, 150, 243, 90), title = 'Background')

// ——— RSI Calculations ———
up1 = ta.rma(math.max(ta.change(src), 0), lengthRSI)
down1 = ta.rma(-math.min(ta.change(src), 0), lengthRSI)
_rsi1 = down1 == 0 ? 100 : up1 == 0 ? 0 : 100 - 100 / (1 + up1 / down1)

up2 = ta.rma(math.max(ta.change(src), 0), lengthRSI2)
down2 = ta.rma(-math.min(ta.change(src), 0), lengthRSI2)
_rsi2 = down2 == 0 ? 100 : up2 == 0 ? 0 : 100 - 100 / (1 + up2 / down2)

// EMA on RSI
ema = ta.ema(_rsi1, lengthEMA)
plot(ema, 'RSI-based EMA', color = color.new(color.yellow, 0))

// Dynamic Colors for RSI Plots
col_rsi = _rsi1 >= 50 ? color.rgb(0, 170, 88) : color.rgb(212, 2, 2)
plot(_rsi1, 'RSI', color = color.new(col_rsi, 0), linewidth = 3)

// ——— MACD Calculation ———
fastLength = input.int(12, minval = 1)
slowLength = input.int(26, minval = 1)
signalLength = input.int(9, minval = 1)
fastMA = ta.ema(src, fastLength)
slowMA = ta.ema(src, slowLength)
macd = fastMA - slowMA
signal = ta.sma(macd, signalLength)
macdHist = macd - signal

// Scaling Factor to fit histogram within ±100
max_hist_value = 100
hist_scale_factor = max_hist_value / math.max(math.abs(ta.highest(macdHist, 100)), math.abs(ta.lowest(macdHist, 100)))
scaledHist = macdHist * hist_scale_factor

// Hollow vs Solid Histogram Bars based on Momentum
histIncreasing = scaledHist > scaledHist[1] // True if current histogram is higher than the previous
histColor = scaledHist > 0 ? histIncreasing ? color.new(color.green, 50) : color.new(color.green, 0) : histIncreasing ? color.new(color.red, 50) : color.new(color.red, 0)

// Plot the scaled histogram with 50% opacity for increasing and solid for decreasing momentum
plot(scaledHist, title = 'Scaled MACD Histogram', color = histColor, style = plot.style_histogram, linewidth = 3)

// Center Line at 0 for alignment of MACD histogram
hline(0, title = 'MACD Center Line', color = color.gray, linestyle = hline.style_solid, linewidth = 2)

// ————— Truncate decimals
f_truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor

// ————— Get ATR and ADX
atr1 = ta.atr(14)
[_, _, adx1] = ta.dmi(17, 4)

var tab1 = table.new(position = position.bottom_right, columns = 1, rows = 3, bgcolor = color.gray, border_width = 1)
if barstate.islast
    table.cell(table_id = tab1, column = 0, row = 0, text_color = color.white, text_size = size.small, text = 'ATR ' + str.tostring(f_truncate(atr1, 4)))
    table.cell(table_id = tab1, column = 0, row = 1, text_color = color.white, text_size = size.small, text = 'ADX ' + str.tostring(f_truncate(adx1, 2)))
    table.cell(table_id = tab1, column = 0, row = 2, text_color = color.white, text_size = size.small, text = 'RSI ' + str.tostring(f_truncate(_rsi1, 2)))
