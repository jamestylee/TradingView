//@version=6
indicator('MEGA Multi-Order v4 - FINAL by -Tylee-', overlay = true)

// ===================================================================
// START: MULTI-ORDER PNL SYSTEM
// ===================================================================

// 1. DEFINE THE DATA STRUCTURE FOR A SINGLE ORDER
type Order
    bool active
    string label
    string symbol
    string direction // "Long" or "Short"
    float entryPrice
    float size
    float liqPrice   // To hold the liquidation price

// 2. CREATE USER INPUTS FOR MULTIPLE ORDERS
g_pnl = "PNL Tracker Settings"
pnlTablePosition = input.string(position.bottom_right, "PNL Table Position", group = g_pnl, options = [position.top_right, position.top_left, position.top_center, position.middle_right, position.middle_left, position.middle_center, position.bottom_right, position.bottom_left, position.bottom_center])
layoutMode = input.string("Horizontal", "Table Layout", group = g_pnl, options=["Horizontal", "Vertical"])

// --- Order 1 ---
g1 = "Order 1 Settings"
o1_active = input.bool(true, "▶️ Active", group=g1, inline="1")
o1_label = input.string("BTC Main", "Label", group=g1, inline="1")
o1_symbol = input.symbol("BINANCE:BTCUSDT", "Symbol", group=g1)
o1_direction = input.string("Long", "Direction", options=["Long", "Short"], group=g1, inline="2")
o1_entry = input.float(25000, "Entry Price", group=g1, inline="3")
o1_size = input.float(0.5, "Size", group=g1, inline="3")
o1_liq = input.float(22500, "Liq. Price", group=g1, inline="4") 

// --- Order 2 ---
g2 = "Order 2 Settings"
o2_active = input.bool(true, "▶️ Active", group=g2, inline="5")
o2_label = input.string("ETH Swing", "Label", group=g2, inline="5")
o2_symbol = input.symbol("BINANCE:ETHUSDT", "Symbol", group=g2)
o2_direction = input.string("Short", "Direction", options=["Long", "Short"], group=g2, inline="6")
o2_entry = input.float(1800, "Entry Price", group=g2, inline="7")
o2_size = input.float(10, "Size", group=g2, inline="7")
o2_liq = input.float(1950, "Liq. Price", group=g2, inline="8")

// --- Order 3 ---
g3 = "Order 3 Settings"
o3_active = input.bool(false, "▶️ Active", group=g3, inline="9")
o3_label = input.string("SOL Scalp", "Label", group=g3, inline="9")
o3_symbol = input.symbol("BINANCE:SOLUSDT", "Symbol", group=g3)
o3_direction = input.string("Long", "Direction", options=["Long", "Short"], group=g3, inline="10")
o3_entry = input.float(40, "Entry Price", group=g3, inline="11")
o3_size = input.float(100, "Size", group=g3, inline="11")
o3_liq = input.float(35, "Liq. Price", group=g3, inline="12")

// --- Order 4 ---
g4 = "Order 4 Settings"
o4_active = input.bool(false, "▶️ Active", group=g4, inline="13")
o4_label = input.string("Hedge 1", "Label", group=g4, inline="13")
o4_symbol = input.symbol("BINANCE:BTCUSDT", "Symbol", group=g4)
o4_direction = input.string("Short", "Direction", options=["Long", "Short"], group=g4, inline="14")
o4_entry = input.float(30000, "Entry Price", group=g4, inline="15")
o4_size = input.float(0.25, "Size", group=g4, inline="15")
o4_liq = input.float(33000, "Liq. Price", group=g4, inline="16")

// --- Order 5 ---
g5 = "Order 5 Settings"
o5_active = input.bool(false, "▶️ Active", group=g5, inline="17")
o5_label = input.string("Alt Hedge", "Label", group=g5, inline="17")
o5_symbol = input.symbol("BINANCE:ETHUSDT", "Symbol", group=g5)
o5_direction = input.string("Long", "Direction", options=["Long", "Short"], group=g5, inline="18")
o5_entry = input.float(1600, "Entry Price", group=g5, inline="19")
o5_size = input.float(5, "Size", group=g5, inline="19")
o5_liq = input.float(1400, "Liq. Price", group=g5, inline="20")

// --- Order 6 ---
g6 = "Order 6 Settings"
o6_active = input.bool(false, "▶️ Active", group=g6, inline="21")
o6_label = input.string("Speculation", "Label", group=g6, inline="21")
o6_symbol = input.symbol("BINANCE:SOLUSDT", "Symbol", group=g6)
o6_direction = input.string("Long", "Direction", options=["Long", "Short"], group=g6, inline="22")
o6_entry = input.float(20, "Entry Price", group=g6, inline="23")
o6_size = input.float(150, "Size", group=g6, inline="23")
o6_liq = input.float(15, "Liq. Price", group=g6, inline="24")

// 3. FETCH PRICES AND INITIALIZE DATA ARRAYS
float pnl_price1 = request.security(o1_symbol, timeframe.period, close)
float pnl_price2 = request.security(o2_symbol, timeframe.period, close)
float pnl_price3 = request.security(o3_symbol, timeframe.period, close)
float pnl_price4 = request.security(o4_symbol, timeframe.period, close)
float pnl_price5 = request.security(o5_symbol, timeframe.period, close)
float pnl_price6 = request.security(o6_symbol, timeframe.period, close)

price_array = array.from(pnl_price1, pnl_price2, pnl_price3, pnl_price4, pnl_price5, pnl_price6)

var orders = array.new<Order>()

if (barstate.isfirst)
    array.push(orders, Order.new(o1_active, o1_label, o1_symbol, o1_direction, o1_entry, o1_size, o1_liq))
    array.push(orders, Order.new(o2_active, o2_label, o2_symbol, o2_direction, o2_entry, o2_size, o2_liq))
    array.push(orders, Order.new(o3_active, o3_label, o3_symbol, o3_direction, o3_entry, o3_size, o3_liq))
    array.push(orders, Order.new(o4_active, o4_label, o4_symbol, o4_direction, o4_entry, o4_size, o4_liq))
    array.push(orders, Order.new(o5_active, o5_label, o5_symbol, o5_direction, o5_entry, o5_size, o5_liq))
    array.push(orders, Order.new(o6_active, o6_label, o6_symbol, o6_direction, o6_entry, o6_size, o6_liq))

// ===================================================================
// END: MULTI-ORDER PNL SYSTEM
// ===================================================================


//BB
length = input.int(20, minval = 1)
maType = input.string('SMA', 'Basis MA Type', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
src = input(close, title = 'Source')
mult = input.float(2.0, minval = 0.001, maxval = 50, title = 'StdDev')

ma(source, length, _type) =>
    switch _type
        'SMA' => ta.sma(source, length)
        'EMA' => ta.ema(source, length)
        'SMMA (RMA)' => ta.rma(source, length)
        'WMA' => ta.wma(source, length)
        'VWMA' => ta.vwma(source, length)

basis = ma(src, length, maType)
dev = mult * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev
offset = input.int(0, 'Offset', minval = -500, maxval = 500, display = display.data_window)
plot(basis, 'Basis', color = #FF6D00, offset = offset)
p1 = plot(upper, 'Upper', color = #2962FF, offset = offset)
p2 = plot(lower, 'Lower', color = #2962FF, offset = offset)
fill(p1, p2, title = 'Background', color = color.rgb(51, 158, 246, 100))

//Ichi Clouds
conversionPeriods = input.int(9, minval = 1, title = 'Conversion Line Length')
basePeriods = input.int(26, minval = 1, title = 'Base Line Length')
laggingSpan2Periods = input.int(52, minval = 1, title = 'Leading Span B Length')
displacement = input.int(26, minval = 1, title = 'Lagging Span')
donchian(len) =>
    math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
p3 = plot(leadLine1, offset = displacement - 1, color = #7ae27e, title = 'Leading Span A')
p4 = plot(leadLine2, offset = displacement - 1, color = #f56d6d, title = 'Leading Span B')
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = 'Kumo Cloud Upper Line', display = display.none)
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = 'Kumo Cloud Lower Line', display = display.none)
fill(p3, p4, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 72, 65) : color.rgb(244, 67, 54, 72))

// Fast MA
maFastSource = input(defval = close, title = 'Fast MA Source')
maFastLength = input.int(defval = 50, title = 'Fast MA Period', minval = 1)
maSlowestSource = input(defval = close, title = 'Slow MA Source')
maSlowestLength = input.int(defval = 200, title = 'Slow MA Period', minval = 1)
maMidsource = input(defval = close, title = 'Mid MA Source')
maMidLength = input.int(defval = 100, title = 'Mid MA Period', minval = 1)
fastMA = ta.ema(maFastSource, maFastLength)
slowestMA = ta.ema(maSlowestSource, maSlowestLength)
mediumMA = ta.ema(maMidsource, maMidLength)
plot(fastMA, color = color.new(color.lime, 0), linewidth = 2)
plot(slowestMA, color = color.new(color.red, 0), linewidth = 2)
plot(mediumMA, color = color.rgb(227, 238, 22), linewidth = 2)
plot(ta.cross(fastMA, slowestMA) ? fastMA : na, style = plot.style_cross, linewidth = 6, color = slowestMA > fastMA ? color.red : color.green, editable = true)

// Create a variable to check for Golden Cross
isGoldenCross = ta.crossover(fastMA, slowestMA)
isDeathCross = ta.crossunder(fastMA, slowestMA)
isCrossunderBelowFastMA = ta.crossunder(close, fastMA)
isCrossoverAboveFastMA = ta.crossover(close, fastMA)
isCrossunderBelowSlowestMA = ta.crossunder(close, slowestMA)
isSlowestMABelowFastMA = slowestMA < fastMA

// Trailing Stops
trailPercent = input.float(1, title = 'Trailing Stop Percentage', minval = 0.1, maxval = 5, step = 0.1)
takeProfitPercent = input.float(1, title = 'Take Profit Percentage', minval = 0.1, maxval = 5, step = 0.1)
trailingStopLevel = close[1] * (1 - trailPercent / 100)
takeProfitLevel = close[1] * (1 + takeProfitPercent / 100)
var line trailingStopLine = na
if na(trailingStopLine)
    trailingStopLine := line.new(na, na, na, na, width = 2, color = color.rgb(241, 234, 234))
line.set_xy1(trailingStopLine, bar_index[1], trailingStopLevel)
line.set_xy2(trailingStopLine, bar_index, trailingStopLevel)
var line takeProfitLine = na
if na(takeProfitLine)
    takeProfitLine := line.new(na, na, na, na, width = 2, color = color.rgb(151, 244, 58))
line.set_xy1(takeProfitLine, bar_index[1], takeProfitLevel)
line.set_xy2(takeProfitLine, bar_index, takeProfitLevel)
belowTrailingStop = low <= trailingStopLevel
aboveTakeProfit = high >= takeProfitLevel

//Fib Retracement
devTooltip = 'Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot.'
depthTooltip = 'The minimum number of bars that will be taken into account when calculating the indicator.'
threshold_multiplier = input.float(title = 'Deviation', defval = 3, minval = 0, tooltip = devTooltip)
depth = input.int(title = 'Depth', defval = 10, minval = 2, tooltip = depthTooltip)
reverse = input(false, 'Reverse')
var extendLeft = input(false, 'Extend Left    |    Extend Right', inline = 'Extend Lines')
var extendRight = input(true, '', inline = 'Extend Lines')
var extending = extend.none
if extendLeft and extendRight
    extending := extend.both
if extendLeft and not extendRight
    extending := extend.left
if not extendLeft and extendRight
    extending := extend.right
prices = input(true, 'Show Prices')
levels = input(true, 'Show Levels', inline = 'Levels')
levelsFormat = input.string('Values', '', options = ['Values', 'Percent'], inline = 'Levels')
labelsPosition = input.string('Left', 'Labels Position', options = ['Left', 'Right'])
var int backgroundTransparency = input.int(98, 'Background Transparency', minval = 0, maxval = 100)

import TradingView/ZigZag/7 as zigzag

update() =>
    var settings = zigzag.Settings.new(threshold_multiplier, depth, color(na), false, false, false, false, 'Absolute', true)
    var zigzag.ZigZag zigZag = zigzag.newInstance(settings)
    var zigzag.Pivot lastP = na
    var float startPrice = na
    var float height = na
    settings.devThreshold := ta.atr(10) / close * 100 * threshold_multiplier
    if zigZag.update()
        lastP := zigZag.lastPivot()
        if not na(lastP)
            var line lineLast = na
            if na(lineLast)
                lineLast := line.new(lastP.start, lastP.end, xloc = xloc.bar_time, color = color.gray, width = 1, style = line.style_dashed)
            else
                line.set_first_point(lineLast, lastP.start)
                line.set_second_point(lineLast, lastP.end)
            startPrice := reverse ? lastP.start.price : lastP.end.price
            endPrice = reverse ? lastP.end.price : lastP.start.price
            height := (startPrice > endPrice ? -1 : 1) * math.abs(startPrice - endPrice)
    [lastP, startPrice, height]

[lastP, startPrice, height] = update()

_draw_line(price, col) =>
    var id = line.new(lastP.start.time, lastP.start.price, time, price, xloc = xloc.bar_time, color = col, width = 1, extend = extending)
    line.set_xy1(id, lastP.start.time, price)
    line.set_xy2(id, lastP.end.time, price)
    id

_draw_label(price, txt, txtColor) =>
    x = labelsPosition == 'Left' ? lastP.start.time : not extendRight ? lastP.end.time : time
    labelStyle = labelsPosition == 'Left' ? label.style_label_right : label.style_label_left
    align = labelsPosition == 'Left' ? text.align_right : text.align_left
    labelsAlignStrLeft = txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStrRight = '       ' + txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStr = labelsPosition == 'Left' ? labelsAlignStrLeft : labelsAlignStrRight
    var id = label.new(x = x, y = price, xloc = xloc.bar_time, text = labelsAlignStr, textcolor = txtColor, style = labelStyle, textalign = align, color = #00000000)
    label.set_xy(id, x, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)

_wrap(txt) => '(' + str.tostring(txt, format.mintick) + ')'
_label_txt(level, price) => (levels ? (levelsFormat == 'Values' ? str.tostring(level) : str.tostring(level * 100) + '%') : '') + (prices ? _wrap(price) : '')
_crossing_level(series float sr, series float r) => r > sr and r < sr[1] or r < sr and r > sr[1]

processLevel(bool show, float value, color colorL, line lineIdOther) =>
    float m = value
    r = startPrice + height * m
    crossed = _crossing_level(close, r)
    if show and not na(lastP)
        lineId = _draw_line(r, colorL)
        _draw_label(r, _label_txt(m, r), colorL)
        if crossed
            alert('Autofib: ' + syminfo.ticker + ' crossing level ' + str.tostring(value))
        if not na(lineIdOther)
            linefill.new(lineId, lineIdOther, color = color.new(colorL, backgroundTransparency))
        lineId
    else
        lineIdOther

show_0 = input(true, '', inline = 'Level0')
value_0 = input(0, '', inline = 'Level0')
color_0 = input(#787b86, '', inline = 'Level0')
show_0_236 = input(true, '', inline = 'Level0')
value_0_236 = input(0.236, '', inline = 'Level0')
color_0_236 = input(#f44336, '', inline = 'Level0')
show_0_382 = input(true, '', inline = 'Level1')
value_0_382 = input(0.382, '', inline = 'Level1')
color_0_382 = input(#81c784, '', inline = 'Level1')
show_0_5 = input(true, '', inline = 'Level1')
value_0_5 = input(0.5, '', inline = 'Level1')
color_0_5 = input(#4caf50, '', inline = 'Level1')
show_0_618 = input(true, '', inline = 'Level2')
value_0_618 = input(0.618, '', inline = 'Level2')
color_0_618 = input(#009688, '', inline = 'Level2')
show_0_65 = input(false, '', inline = 'Level2')
value_0_65 = input(0.65, '', inline = 'Level2')
color_0_65 = input(#009688, '', inline = 'Level2')
show_0_786 = input(true, '', inline = 'Level3')
value_0_786 = input(0.786, '', inline = 'Level3')
color_0_786 = input(#64b5f6, '', inline = 'Level3')
show_1 = input(true, '', inline = 'Level3')
value_1 = input(1, '', inline = 'Level3')
color_1 = input(#787b86, '', inline = 'Level3')
show_1_272 = input(false, '', inline = 'Level4')
value_1_272 = input(1.272, '', inline = 'Level4')
color_1_272 = input(#81c784, '', inline = 'Level4')
show_1_414 = input(false, '', inline = 'Level4')
value_1_414 = input(1.414, '', inline = 'Level4')
color_1_414 = input(#f44336, '', inline = 'Level4')
show_1_618 = input(true, '', inline = 'Level5')
value_1_618 = input(1.618, '', inline = 'Level5')
color_1_618 = input(#2962ff, '', inline = 'Level5')
show_1_65 = input(false, '', inline = 'Level5')
value_1_65 = input(1.65, '', inline = 'Level5')
color_1_65 = input(#2962ff, '', inline = 'Level5')
show_2_618 = input(true, '', inline = 'Level6')
value_2_618 = input(2.618, '', inline = 'Level6')
color_2_618 = input(#f44336, '', inline = 'Level6')
show_2_65 = input(false, '', inline = 'Level6')
value_2_65 = input(2.65, '', inline = 'Level6')
color_2_65 = input(#f44336, '', inline = 'Level6')
show_3_618 = input(true, '', inline = 'Level7')
value_3_618 = input(3.618, '', inline = 'Level7')
color_3_618 = input(#9c27b0, '', inline = 'Level7')
show_3_65 = input(false, '', inline = 'Level7')
value_3_65 = input(3.65, '', inline = 'Level7')
color_3_65 = input(#9c27b0, '', inline = 'Level7')
show_4_236 = input(true, '', inline = 'Level8')
value_4_236 = input(4.236, '', inline = 'Level8')
color_4_236 = input(#e91e63, '', inline = 'Level8')
show_4_618 = input(false, '', inline = 'Level8')
value_4_618 = input(4.618, '', inline = 'Level8')
color_4_618 = input(#81c784, '', inline = 'Level8')
show_neg_0_236 = input(false, '', inline = 'Level9')
value_neg_0_236 = input(-0.236, '', inline = 'Level9')
color_neg_0_236 = input(#f44336, '', inline = 'Level9')
show_neg_0_382 = input(false, '', inline = 'Level9')
value_neg_0_382 = input(-0.382, '', inline = 'Level9')
color_neg_0_382 = input(#81c784, '', inline = 'Level9')
show_neg_0_618 = input(false, '', inline = 'Level10')
value_neg_0_618 = input(-0.618, '', inline = 'Level10')
color_neg_0_618 = input(#009688, '', inline = 'Level10')
show_neg_0_65 = input(false, '', inline = 'Level10')
value_neg_0_65 = input(-0.65, '', inline = 'Level10')
color_neg_0_65 = input(#009688, '', inline = 'Level10')

lineId0 = processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65, line(na))
lineId1 = processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618, lineId0)
lineId2 = processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382, lineId1)
lineId3 = processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236, lineId2)
lineId4 = processLevel(show_0, value_0, color_0, lineId3)
lineId5 = processLevel(show_0_236, value_0_236, color_0_236, lineId4)
lineId6 = processLevel(show_0_382, value_0_382, color_0_382, lineId5)
lineId7 = processLevel(show_0_5, value_0_5, color_0_5, lineId6)
lineId8 = processLevel(show_0_618, value_0_618, color_0_618, lineId7)
lineId9 = processLevel(show_0_65, value_0_65, color_0_65, lineId8)
lineId10 = processLevel(show_0_786, value_0_786, color_0_786, lineId9)
lineId11 = processLevel(show_1, value_1, color_1, lineId10)
lineId12 = processLevel(show_1_272, value_1_272, color_1_272, lineId11)
lineId13 = processLevel(show_1_414, value_1_414, color_1_414, lineId12)
lineId14 = processLevel(show_1_618, value_1_618, color_1_618, lineId13)
lineId15 = processLevel(show_1_65, value_1_65, color_1_65, lineId14)
lineId16 = processLevel(show_2_618, value_2_618, color_2_618, lineId15)
lineId17 = processLevel(show_2_65, value_2_65, color_2_65, lineId16)
lineId18 = processLevel(show_3_618, value_3_618, color_3_618, lineId17)
lineId19 = processLevel(show_3_65, value_3_65, color_3_65, lineId18)
lineId20 = processLevel(show_4_236, value_4_236, color_4_236, lineId19)
lineId21 = processLevel(show_4_618, value_4_618, color_4_618, lineId20)

// © FriendOfTheTrend
//Directions
directions = input.bool(true, title = 'Show Indicator Directions', group = 'Info Tables')
infoDataTableOn = input.bool(true, title = 'Indicator Directions Table On/Off', group = 'Info Tables')
itablePosition = input.string(position.top_right, title = 'Indicator Table Position', options = [position.top_right, position.top_left, position.top_center, position.middle_right, position.middle_left, position.middle_center, position.bottom_right, position.bottom_left, position.bottom_center], group = 'Info Tables')
//Lengths
vortexOn = input.bool(true, title = 'Turn Vortex Label On/Off', group = 'Vortex Settings')
vortexOrder = input.int(3, title = 'Place On The List', minval = 1, maxval = 9, group = 'Vortex Settings')
vortexLength = input.int(14, title = 'Vortex Length', minval = 2, group = 'Vortex Settings')
momOn = input.bool(true, title = 'Turn Momentum Label On/Off', group = 'Momentum Settings')
momOrder = input.int(4, title = 'Place On The List', minval = 1, maxval = 9, group = 'Momentum Settings')
momLength = input.int(14, title = 'Momentum Length', minval = 2, group = 'Momentum Settings')
dmiOn = input.bool(true, title = 'Turn DMI Label On/Off', group = 'DMI Settings')
dmiOrder = input.int(7, title = 'Place On The List', minval = 1, maxval = 9, group = 'DMI Settings')
dmiLength = input.int(14, title = 'DMI Length', minval = 2, group = 'DMI Settings')
dmiSmooth = input.int(14, title = 'DMI Smoothing', minval = 2, group = 'DMI Settings')
mfiOn = input.bool(true, title = 'Turn Money Flow Index Label On/Off', group = 'Money Flow Index Settings')
mfiOrder = input.int(8, title = 'Place On The List', minval = 1, maxval = 9, group = 'Money Flow Index Settings')
mfiLength = input.int(14, title = 'Money Flow Index Length', minval = 2, group = 'Money Flow Index Settings')

//Vortex
VMP = math.sum(math.abs(high - low[1]), vortexLength)
VMM = math.sum(math.abs(low - high[1]), vortexLength)
STR = math.sum(ta.atr(1), vortexLength)
VIP = VMP / STR
VIM = VMM / STR
//DMI
[diplus, diminus, adx] = ta.dmi(dmiLength, dmiSmooth)
//Momentum
mom = ta.mom(close, momLength)
//Money Flow Index
mfi = ta.mfi(close, mfiLength)
//Create indicator label table data
vortexIndicatorLabel = VIP > VIM ? 'Vortex Bullish' : VIP < VIM ? 'Vortex Bearish' : 'Vortex Neutral'
vortexLabel = VIP > VIM ? color.lime : VIP < VIM ? color.red : color.blue
mfiIndicatorLabel = mfi > mfi[1] ? 'MFI Bullish' : mfi < mfi[1] ? 'MFI Bearish' : 'MFI Neutral'
mfiLabel = mfi > mfi[1] ? color.lime : mfi < mfi[1] ? color.red : color.blue
dmiIndicatorLabel = diplus > diminus ? 'DMI Bullish' : diplus < diminus ? 'DMI Bearish' : 'DMI Neutral'
dmiLabel = diplus > diminus ? color.lime : diplus < diminus ? color.red : color.blue
momIndicatorLabel = mom > mom[1] ? 'Momentum Bullish' : mom < mom[1] ? 'Momentum Bearish' : 'Momentum Neutral'
momLabel = mom > mom[1] ? color.lime : mom < mom[1] ? color.red : color.blue

// ===================================================================
// FINAL TABLE DRAWING LOGIC
// ===================================================================

// --- TABLE 1: INDICATOR DIRECTIONS (Your original table logic) ---
if infoDataTableOn and barstate.islast
    infoDataTable = table.new(itablePosition, columns = 1, rows = 22, border_width = 1)
    table.cell(infoDataTable, 0, 0, 'Indicator Directions', bgcolor=color.purple, text_color=color.white, text_halign=text.align_left, text_valign=text.align_top)
    table.cell(infoDataTable, 0, mfiOrder, mfiOn ? mfiIndicatorLabel : na, bgcolor=mfiLabel, text_color=color.white, text_halign=text.align_left, text_valign=text.align_top)
    table.cell(infoDataTable, 0, dmiOrder, dmiOn ? dmiIndicatorLabel : na, bgcolor=dmiLabel, text_color=color.white, text_halign=text.align_left, text_valign=text.align_top)
    table.cell(infoDataTable, 0, momOrder, momOn ? momIndicatorLabel : na, bgcolor=momLabel, text_color=color.white, text_halign=text.align_left, text_valign=text.align_top)
    table.cell(infoDataTable, 0, vortexOrder, vortexOn ? vortexIndicatorLabel : na, bgcolor=vortexLabel, text_color=color.white, text_halign=text.align_left, text_valign=text.align_top)


// --- TABLE 2: NEW MULTI-ORDER PNL TRACKER (with Layout Switching) ---
if barstate.islast
    // A. HORIZONTAL LAYOUT
    if layoutMode == "Horizontal"
        int activeOrdersCount = 0
        for i = 0 to array.size(orders) - 1
            if array.get(orders, i).active
                activeOrdersCount += 1
        int totalRows = 1 + activeOrdersCount + 1
        pnlTable = table.new(pnlTablePosition, columns=6, rows=totalRows, border_width=1)
        table.cell(pnlTable, 0, 0, "Label", bgcolor=color.new(color.blue, 0), text_color=color.white)
        table.cell(pnlTable, 1, 0, "Direction", bgcolor=color.new(color.blue, 0), text_color=color.white)
        table.cell(pnlTable, 2, 0, "Entry", bgcolor=color.new(color.blue, 0), text_color=color.white)
        table.cell(pnlTable, 3, 0, "Current", bgcolor=color.new(color.blue, 0), text_color=color.white)
        table.cell(pnlTable, 4, 0, "PNL ($)", bgcolor=color.new(color.blue, 0), text_color=color.white)
        table.cell(pnlTable, 5, 0, "Dist. to Liq. %", bgcolor=color.new(color.purple, 0), text_color=color.white)
        float totalPnl = 0.0
        int rowIndex = 1
        for i = 0 to array.size(orders) - 1
            Order trade = array.get(orders, i)
            if trade.active
                float currentPrice = array.get(price_array, i)
                float pnl = trade.direction == "Long" ? (currentPrice - trade.entryPrice) * trade.size : (trade.entryPrice - currentPrice) * trade.size
                totalPnl += pnl
                color pnlColor = pnl >= 0 ? color.new(color.green, 20) : color.new(color.red, 20)
                float distPercent = 0.0
                string distText = "N/A"
                if trade.liqPrice > 0 and currentPrice > 0
                    distPercent := trade.direction == "Long" ? (currentPrice - trade.liqPrice) / currentPrice * 100 : (trade.liqPrice - currentPrice) / currentPrice * 100
                    distText := str.tostring(distPercent, "0.00") + "%"
                color liqColor = color.new(color.gray, 60)
                if distPercent < 10 and distPercent > 0
                    liqColor := color.new(color.yellow, 20)
                if distPercent <= 5 and distPercent > 0
                    liqColor := color.new(color.red, 20)
                if distPercent <= 0
                    liqColor := color.new(#880808, 0)
                table.cell(pnlTable, 0, rowIndex, trade.label, bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, trade.direction, bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 2, rowIndex, str.tostring(trade.entryPrice, format.mintick), bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 3, rowIndex, str.tostring(currentPrice, format.mintick), bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 4, rowIndex, str.tostring(pnl, "0.00"), bgcolor=pnlColor, text_color=color.white)
                table.cell(pnlTable, 5, rowIndex, distText, bgcolor=liqColor, text_color=color.white)
                rowIndex += 1
        color totalPnlColor = totalPnl >= 0 ? color.new(color.teal, 0) : color.new(color.maroon, 0)
        table.cell(pnlTable, 0, rowIndex, "TOTAL", bgcolor=color.new(color.black, 0), text_size=size.large, text_color=color.white)
        table.merge_cells(pnlTable, 0, rowIndex, 4, rowIndex)
        table.cell(pnlTable, 5, rowIndex, str.tostring(totalPnl, "0.00"), bgcolor=totalPnlColor, text_size=size.large, text_color=color.white)
    // B. VERTICAL LAYOUT
    else
        int activeOrdersCount = 0
        for i = 0 to array.size(orders) - 1
            if array.get(orders, i).active
                activeOrdersCount += 1
        int totalRows = (activeOrdersCount * 6) + 1
        pnlTable = table.new(pnlTablePosition, columns=2, rows=totalRows, border_width=1)
        float totalPnl = 0.0
        int rowIndex = 0
        for i = 0 to array.size(orders) - 1
            Order trade = array.get(orders, i)
            if trade.active
                float currentPrice = array.get(price_array, i)
                float pnl = trade.direction == "Long" ? (currentPrice - trade.entryPrice) * trade.size : (trade.entryPrice - currentPrice) * trade.size
                totalPnl += pnl
                color pnlColor = pnl >= 0 ? color.new(color.green, 20) : color.new(color.red, 20)
                float distPercent = 0.0
                string distText = "N/A"
                if trade.liqPrice > 0 and currentPrice > 0
                    distPercent := trade.direction == "Long" ? (currentPrice - trade.liqPrice) / currentPrice * 100 : (trade.liqPrice - currentPrice) / currentPrice * 100
                    distText := str.tostring(distPercent, "0.00") + "%"
                color liqColor = color.new(color.gray, 60)
                if distPercent < 10 and distPercent > 0
                    liqColor := color.new(color.yellow, 20)
                if distPercent <= 5 and distPercent > 0
                    liqColor := color.new(color.red, 20)
                if distPercent <= 0
                    liqColor := color.new(#880808, 0)
                table.cell(pnlTable, 0, rowIndex, trade.label, bgcolor=color.new(color.blue, 0), text_color=color.white)
                table.merge_cells(pnlTable, 0, rowIndex, 1, rowIndex)
                rowIndex += 1
                table.cell(pnlTable, 0, rowIndex, "Direction", bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, trade.direction, bgcolor=color.new(color.gray, 60), text_color=color.white)
                rowIndex += 1
                table.cell(pnlTable, 0, rowIndex, "Entry", bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, str.tostring(trade.entryPrice, format.mintick), bgcolor=color.new(color.gray, 60), text_color=color.white)
                rowIndex += 1
                table.cell(pnlTable, 0, rowIndex, "Current", bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, str.tostring(currentPrice, format.mintick), bgcolor=color.new(color.gray, 60), text_color=color.white)
                rowIndex += 1
                table.cell(pnlTable, 0, rowIndex, "PNL ($)", bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, str.tostring(pnl, "0.00"), bgcolor=pnlColor, text_color=color.white)
                rowIndex += 1
                table.cell(pnlTable, 0, rowIndex, "Dist. Liq. %", bgcolor=color.new(color.gray, 80), text_color=color.white)
                table.cell(pnlTable, 1, rowIndex, distText, bgcolor=liqColor, text_color=color.white)
                rowIndex += 1
        color totalPnlColor = totalPnl >= 0 ? color.new(color.teal, 0) : color.new(color.maroon, 0)
        table.cell(pnlTable, 0, rowIndex, "TOTAL PNL", bgcolor=color.new(color.black, 0), text_size=size.large, text_color=color.white)
        table.cell(pnlTable, 1, rowIndex, str.tostring(totalPnl, "0.00"), bgcolor=totalPnlColor, text_size=size.large, text_color=color.white)
